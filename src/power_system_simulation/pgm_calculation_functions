import json
import math
import random

import pandas as pd
from power_grid_model import CalculationType, initialize_array
from power_grid_model.utils import json_deserialize
from power_grid_model.validation import assert_valid_batch_data

from power_system_simulation.graph_processing import GraphProcessor
from power_system_simulation.input_data_validity_check import reformat_pgm_to_array
from power_system_simulation.pgm_calculation_module import PGMcalculation
from power_system_simulation.ev_penetration_level import ev_penetration_calculation


class PGMfunctions:
    def __init__(self):
        """Initializes the PGMfunctions class with no parameters."""
    
    def create_pgm_model(self, path_input_network_data: str):
        # Create PGM model instance
        self.path_input_network_data=path_input_network_data
        self.model = PGMcalculation()
        self.model.create_pgm(path_input_network_data)

        # Create array model of network
        with open(path_input_network_data, encoding="utf-8") as ind:
            input_network = json_deserialize(ind.read())
        vertex_ids, edge_ids, edge_vertex_id_pairs, edge_enabled, source_vertex_id = reformat_pgm_to_array(input_network)
        self.input_network_array_model = GraphProcessor(
            vertex_ids, edge_ids, edge_vertex_id_pairs, edge_enabled, source_vertex_id
        )
    
    def create_batch_update_data(self, path_active_power_profile: str, path_reactive_power_profile: str) -> None:
        self.model.create_batch_update_data(path_active_power_profile, path_reactive_power_profile)
    
    def ev_penetration_level(self, path_ev_power_profile: str, path_meta_data: str, penetration_level_percentage: int, assert_valid_pwr_profile=False):
        df_voltages, df_line_loading=ev_penetration_calculation(self.model, self.input_network_array_model, self.path_input_network_data, path_ev_power_profile,path_meta_data,penetration_level_percentage, assert_valid_pwr_profile=assert_valid_pwr_profile)
        return df_voltages, df_line_loading

pth_input_network_data = "tests/data/small_network/input/input_network_data.json"
pth_active_profile = "tests/data/small_network/input/active_power_profile.parquet"
pth_reactive_profile = "tests/data/small_network/input/reactive_power_profile.parquet"
pth_ev_power = "tests/data/small_network/input/ev_active_power_profile.parquet"
pth_meta_data = "tests/data/small_network/input/meta_data.json"

pgm_model=PGMfunctions()
pgm_model.create_pgm_model(pth_input_network_data)
pgm_model.create_batch_update_data(pth_active_profile, pth_reactive_profile)
print(pgm_model.ev_penetration_level(pth_ev_power, pth_meta_data, 50, True))